/*
 * 프로젝트 Gradle 설정 파일
 * 작성자 : 조현우
 * 작성일 : 2025-07-04
 * 설명   : Spring Boot + MyBatis + Oracle 기반 백엔드 빌드 설정
 */

plugins {
	id 'java'
	id 'war'
	id 'org.springframework.boot' version '3.3.13'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'fs.human'
version = '0.0.1-SNAPSHOT'

// Java 17 사용 설정
java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

// 컴파일 전용 설정 (lombok용)
configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

// 의존성 저장소
repositories {
	mavenCentral()
}

// 프로젝트 의존성
dependencies {
	// 핵심기능
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.4'

	// 개발 편의
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'

	// 비밀번호 암호화
	implementation 'org.springframework.boot:spring-boot-starter-security'

	// 데이터베이스 드라이버
	runtimeOnly 'com.oracle.database.jdbc:ojdbc11'

	// WAS 설정(WAS 배포 시)
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

	// 테스트 관련
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:3.0.4'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// JWT 관련 라이브러리
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// 메일 관련
	implementation 'org.springframework.boot:spring-boot-starter-mail'

	// WebFlux
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	// 이미지 리사이징
	implementation 'net.coobird:thumbnailator:0.4.20'
	implementation 'commons-fileupload:commons-fileupload:1.5'
}

// JUnit 설정
tasks.named('test') {
	useJUnitPlatform()
}

// React 빌드
task buildReact(type: Exec) {
	workingDir "$projectDir/../frontend"
	def yarnCommand = System.getProperty("os.name").toLowerCase().contains("windows") ? "yarn.cmd" : "yarn"
	commandLine yarnCommand, "run", "build"
}

// React 이미지 복사 (public/static/images/** → Spring static/)
task copyReactImages(type: Copy) {
	from "$rootDir/frontend/public/static/images"
	into "$projectDir/src/main/resources/static/images"
}

// React 빌드 결과 복사 (build/ → Spring static/)
task copyFrontend(type: Copy) {
	from("$projectDir/../frontend/build") {
		exclude "images/**"
	}
	into "$projectDir/src/main/resources/static"
	includeEmptyDirs = false

	// static/ 경로 평탄화
	eachFile { file ->
		if (file.path.startsWith('static/')) {
			file.path = file.path.substring(7)
		}
	}
}

// Easter egg 복사 (ygstory → Spring static/)
task copyYgstory(type: Copy) {

	from("$projectDir/../ygstory/") {

		// html 폴더 내 index.html을 static/ygstory/로 복사
		include '**/*'

	}

	into "$projectDir/src/main/resources/static/ygstory"
	includeEmptyDirs = false
}

// 리소스 처리 전 실행될 전체 복사 태스크
task prepareStaticResources {
	dependsOn buildReact
	dependsOn copyReactImages
	dependsOn copyFrontend
	dependsOn copyYgstory
}

// build 전에 복사 태스크 실행되도록 연결
tasks.named('build') {
	dependsOn prepareStaticResources
}

// 리소스 처리 전에도 복사하도록 설정 (개발 서버용 대비)
tasks.named('processResources') {
	dependsOn prepareStaticResources
}

// 실행 순서 명확하게 지정
copyReactImages.mustRunAfter buildReact
copyFrontend.mustRunAfter copyReactImages
copyYgstory.mustRunAfter copyFrontend

bootRun.dependsOn prepareStaticResources
